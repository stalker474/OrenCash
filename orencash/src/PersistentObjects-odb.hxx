// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef PERSISTENT_OBJECTS_ODB_HXX
#define PERSISTENT_OBJECTS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "PersistentObjects.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Transaction
  //
  template <>
  struct class_traits< ::orencash::persist::Transaction >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::orencash::persist::Transaction >
  {
    public:
    typedef ::orencash::persist::Transaction object_type;
    typedef ::orencash::persist::Transaction* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Block
  //
  template <>
  struct class_traits< ::orencash::persist::Block >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::orencash::persist::Block >
  {
    public:
    typedef ::orencash::persist::Block object_type;
    typedef ::orencash::persist::Block* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Wallet
  //
  template <>
  struct class_traits< ::orencash::persist::Wallet >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::orencash::persist::Wallet >
  {
    public:
    typedef ::orencash::persist::Wallet object_type;
    typedef ::orencash::persist::Wallet* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // TransactionInput
  //
  template <>
  class access::composite_value_traits< ::orencash::persist::TransactionInput, id_sqlite >
  {
    public:
    typedef ::orencash::persist::TransactionInput value_type;

    struct image_type
    {
      // TransactionID
      //
      long long TransactionID_value;
      bool TransactionID_null;

      // Index
      //
      long long Index_value;
      bool Index_null;

      // Amount
      //
      long long Amount_value;
      bool Amount_null;

      // Address
      //
      details::buffer Address_value;
      std::size_t Address_size;
      bool Address_null;

      // Signature
      //
      details::buffer Signature_value;
      std::size_t Signature_size;
      bool Signature_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          sqlite::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              sqlite::statement_kind);

    static const std::size_t column_count = 5UL;
  };

  // TransactionOutput
  //
  template <>
  class access::composite_value_traits< ::orencash::persist::TransactionOutput, id_sqlite >
  {
    public:
    typedef ::orencash::persist::TransactionOutput value_type;

    struct image_type
    {
      // TransactionID
      //
      long long TransactionID_value;
      bool TransactionID_null;

      // Index
      //
      long long Index_value;
      bool Index_null;

      // Amount
      //
      long long Amount_value;
      bool Amount_null;

      // Address
      //
      details::buffer Address_value;
      std::size_t Address_size;
      bool Address_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          sqlite::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              sqlite::statement_kind);

    static const std::size_t column_count = 4UL;
  };

  // Transaction
  //
  template <typename A>
  struct query_columns< ::orencash::persist::Transaction, id_sqlite, A >
  {
    // ID
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    ID_type_;

    static const ID_type_ ID;

    // Hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    Hash_type_;

    static const Hash_type_ Hash;

    // Type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::orencash::persist::TransactionType,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    Type_type_;

    static const Type_type_ Type;
  };

  template <typename A>
  const typename query_columns< ::orencash::persist::Transaction, id_sqlite, A >::ID_type_
  query_columns< ::orencash::persist::Transaction, id_sqlite, A >::
  ID (A::table_name, "\"ID\"", 0);

  template <typename A>
  const typename query_columns< ::orencash::persist::Transaction, id_sqlite, A >::Hash_type_
  query_columns< ::orencash::persist::Transaction, id_sqlite, A >::
  Hash (A::table_name, "\"Hash\"", 0);

  template <typename A>
  const typename query_columns< ::orencash::persist::Transaction, id_sqlite, A >::Type_type_
  query_columns< ::orencash::persist::Transaction, id_sqlite, A >::
  Type (A::table_name, "\"Type\"", 0);

  template <typename A>
  struct pointer_query_columns< ::orencash::persist::Transaction, id_sqlite, A >:
    query_columns< ::orencash::persist::Transaction, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >:
    public access::object_traits< ::orencash::persist::Transaction >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // ID
      //
      long long ID_value;
      bool ID_null;

      // Hash
      //
      details::buffer Hash_value;
      std::size_t Hash_size;
      bool Hash_null;

      // Type
      //
      long long Type_value;
      bool Type_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // Inputs
    //
    struct Inputs_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 7UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::orencash::persist::TransactionInput > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< Inputs_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        composite_value_traits< value_type, id_sqlite >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // Outputs
    //
    struct Outputs_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 6UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::orencash::persist::TransactionOutput > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< Outputs_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        composite_value_traits< value_type, id_sqlite >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::orencash::persist::Transaction, id_common >:
    public access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >
  {
  };

  // Block
  //
  template <typename A>
  struct query_columns< ::orencash::persist::Block, id_sqlite, A >
  {
    // Index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    Index_type_;

    static const Index_type_ Index;

    // PreviousHash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    PreviousHash_type_;

    static const PreviousHash_type_ PreviousHash;

    // TimeStamp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::time_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    TimeStamp_type_;

    static const TimeStamp_type_ TimeStamp;

    // Nonce
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    Nonce_type_;

    static const Nonce_type_ Nonce;

    // Hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    Hash_type_;

    static const Hash_type_ Hash;
  };

  template <typename A>
  const typename query_columns< ::orencash::persist::Block, id_sqlite, A >::Index_type_
  query_columns< ::orencash::persist::Block, id_sqlite, A >::
  Index (A::table_name, "\"Index\"", 0);

  template <typename A>
  const typename query_columns< ::orencash::persist::Block, id_sqlite, A >::PreviousHash_type_
  query_columns< ::orencash::persist::Block, id_sqlite, A >::
  PreviousHash (A::table_name, "\"PreviousHash\"", 0);

  template <typename A>
  const typename query_columns< ::orencash::persist::Block, id_sqlite, A >::TimeStamp_type_
  query_columns< ::orencash::persist::Block, id_sqlite, A >::
  TimeStamp (A::table_name, "\"TimeStamp\"", 0);

  template <typename A>
  const typename query_columns< ::orencash::persist::Block, id_sqlite, A >::Nonce_type_
  query_columns< ::orencash::persist::Block, id_sqlite, A >::
  Nonce (A::table_name, "\"Nonce\"", 0);

  template <typename A>
  const typename query_columns< ::orencash::persist::Block, id_sqlite, A >::Hash_type_
  query_columns< ::orencash::persist::Block, id_sqlite, A >::
  Hash (A::table_name, "\"Hash\"", 0);

  template <typename A>
  struct pointer_query_columns< ::orencash::persist::Block, id_sqlite, A >:
    query_columns< ::orencash::persist::Block, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::orencash::persist::Block, id_sqlite >:
    public access::object_traits< ::orencash::persist::Block >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // Index
      //
      long long Index_value;
      bool Index_null;

      // PreviousHash
      //
      details::buffer PreviousHash_value;
      std::size_t PreviousHash_size;
      bool PreviousHash_null;

      // TimeStamp
      //
      long long TimeStamp_value;
      bool TimeStamp_null;

      // Nonce
      //
      long long Nonce_value;
      bool Nonce_null;

      // Hash
      //
      details::buffer Hash_value;
      std::size_t Hash_size;
      bool Hash_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // Transactions
    //
    struct Transactions_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::shared_ptr< ::orencash::persist::Transaction > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< Transactions_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::orencash::persist::Block, id_common >:
    public access::object_traits_impl< ::orencash::persist::Block, id_sqlite >
  {
  };

  // KeyPair
  //
  template <>
  class access::composite_value_traits< ::orencash::persist::KeyPair, id_sqlite >
  {
    public:
    typedef ::orencash::persist::KeyPair value_type;

    struct image_type
    {
      // PublicKey
      //
      details::buffer PublicKey_value;
      std::size_t PublicKey_size;
      bool PublicKey_null;

      // PrivateKey
      //
      details::buffer PrivateKey_value;
      std::size_t PrivateKey_size;
      bool PrivateKey_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          sqlite::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              sqlite::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // Wallet
  //
  template <typename A>
  struct query_columns< ::orencash::persist::Wallet, id_sqlite, A >
  {
    // ID
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    ID_type_;

    static const ID_type_ ID;

    // PasswordHash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    PasswordHash_type_;

    static const PasswordHash_type_ PasswordHash;

    // Secret
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    Secret_type_;

    static const Secret_type_ Secret;
  };

  template <typename A>
  const typename query_columns< ::orencash::persist::Wallet, id_sqlite, A >::ID_type_
  query_columns< ::orencash::persist::Wallet, id_sqlite, A >::
  ID (A::table_name, "\"ID\"", 0);

  template <typename A>
  const typename query_columns< ::orencash::persist::Wallet, id_sqlite, A >::PasswordHash_type_
  query_columns< ::orencash::persist::Wallet, id_sqlite, A >::
  PasswordHash (A::table_name, "\"PasswordHash\"", 0);

  template <typename A>
  const typename query_columns< ::orencash::persist::Wallet, id_sqlite, A >::Secret_type_
  query_columns< ::orencash::persist::Wallet, id_sqlite, A >::
  Secret (A::table_name, "\"Secret\"", 0);

  template <typename A>
  struct pointer_query_columns< ::orencash::persist::Wallet, id_sqlite, A >:
    query_columns< ::orencash::persist::Wallet, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >:
    public access::object_traits< ::orencash::persist::Wallet >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // ID
      //
      long long ID_value;
      bool ID_null;

      // PasswordHash
      //
      details::buffer PasswordHash_value;
      std::size_t PasswordHash_size;
      bool PasswordHash_null;

      // Secret
      //
      details::buffer Secret_value;
      std::size_t Secret_size;
      bool Secret_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // Keypairs
    //
    struct Keypairs_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 4UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::orencash::persist::KeyPair > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< Keypairs_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        composite_value_traits< value_type, id_sqlite >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::orencash::persist::Wallet, id_common >:
    public access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >
  {
  };

  // Transaction
  //
  // Block
  //
  // Wallet
  //
}

#include "PersistentObjects-odb.ixx"

#include <odb/post.hxx>

#endif // PERSISTENT_OBJECTS_ODB_HXX
