// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // Transaction
  //

  inline
  access::object_traits< ::orencash::persist::Transaction >::id_type
  access::object_traits< ::orencash::persist::Transaction >::
  id (const object_type& o)
  {
    return o.ID;
  }

  inline
  void access::object_traits< ::orencash::persist::Transaction >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::orencash::persist::Transaction >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Block
  //

  inline
  access::object_traits< ::orencash::persist::Block >::id_type
  access::object_traits< ::orencash::persist::Block >::
  id (const object_type& o)
  {
    return o.Index;
  }

  inline
  void access::object_traits< ::orencash::persist::Block >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::orencash::persist::Block >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Wallet
  //

  inline
  access::object_traits< ::orencash::persist::Wallet >::id_type
  access::object_traits< ::orencash::persist::Wallet >::
  id (const object_type& o)
  {
    return o.ID;
  }

  inline
  void access::object_traits< ::orencash::persist::Wallet >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::orencash::persist::Wallet >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

namespace odb
{
  // TransactionInput
  //

  inline
  bool access::composite_value_traits< ::orencash::persist::TransactionInput, id_sqlite >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.TransactionID_null;
    r = r && i.Index_null;
    r = r && i.Amount_null;
    r = r && i.Address_null;
    r = r && i.Signature_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::orencash::persist::TransactionInput, id_sqlite >::
  set_null (image_type& i,
            sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    i.TransactionID_null = true;
    i.Index_null = true;
    i.Amount_null = true;
    i.Address_null = true;
    i.Signature_null = true;
  }

  // TransactionOutput
  //

  inline
  bool access::composite_value_traits< ::orencash::persist::TransactionOutput, id_sqlite >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.TransactionID_null;
    r = r && i.Index_null;
    r = r && i.Amount_null;
    r = r && i.Address_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::orencash::persist::TransactionOutput, id_sqlite >::
  set_null (image_type& i,
            sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    i.TransactionID_null = true;
    i.Index_null = true;
    i.Amount_null = true;
    i.Address_null = true;
  }

  // Transaction
  //

  inline
  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Block
  //

  inline
  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // KeyPair
  //

  inline
  bool access::composite_value_traits< ::orencash::persist::KeyPair, id_sqlite >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.PublicKey_null;
    r = r && i.PrivateKey_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::orencash::persist::KeyPair, id_sqlite >::
  set_null (image_type& i,
            sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    i.PublicKey_null = true;
    i.PrivateKey_null = true;
  }

  // Wallet
  //

  inline
  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }
}

