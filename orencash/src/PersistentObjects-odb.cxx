// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "PersistentObjects-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/simple-object-statements.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>
#include <odb/sqlite/simple-object-result.hxx>

namespace odb
{
  // TransactionInput
  //

  bool access::composite_value_traits< ::orencash::persist::TransactionInput, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // TransactionID
    //
    t[0UL] = false;

    // Index
    //
    t[1UL] = false;

    // Amount
    //
    t[2UL] = false;

    // Address
    //
    if (t[3UL])
    {
      i.Address_value.capacity (i.Address_size);
      grew = true;
    }

    // Signature
    //
    if (t[4UL])
    {
      i.Signature_value.capacity (i.Signature_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::orencash::persist::TransactionInput, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // TransactionID
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.TransactionID_value;
    b[n].is_null = &i.TransactionID_null;
    n++;

    // Index
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.Index_value;
    b[n].is_null = &i.Index_null;
    n++;

    // Amount
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.Amount_value;
    b[n].is_null = &i.Amount_null;
    n++;

    // Address
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.Address_value.data ();
    b[n].size = &i.Address_size;
    b[n].capacity = i.Address_value.capacity ();
    b[n].is_null = &i.Address_null;
    n++;

    // Signature
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.Signature_value.data ();
    b[n].size = &i.Signature_size;
    b[n].capacity = i.Signature_value.capacity ();
    b[n].is_null = &i.Signature_null;
    n++;
  }

  bool access::composite_value_traits< ::orencash::persist::TransactionInput, id_sqlite >::
  init (image_type& i,
        const value_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // TransactionID
    //
    {
      ::uint64_t const& v =
        o.TransactionID;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.TransactionID_value,
        is_null,
        v);
      i.TransactionID_null = is_null;
    }

    // Index
    //
    {
      ::uint64_t const& v =
        o.Index;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.Index_value,
        is_null,
        v);
      i.Index_null = is_null;
    }

    // Amount
    //
    {
      ::uint64_t const& v =
        o.Amount;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.Amount_value,
        is_null,
        v);
      i.Amount_null = is_null;
    }

    // Address
    //
    {
      ::std::string const& v =
        o.Address;

      bool is_null (false);
      std::size_t cap (i.Address_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.Address_value,
        i.Address_size,
        is_null,
        v);
      i.Address_null = is_null;
      grew = grew || (cap != i.Address_value.capacity ());
    }

    // Signature
    //
    {
      ::std::string const& v =
        o.Signature;

      bool is_null (false);
      std::size_t cap (i.Signature_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.Signature_value,
        i.Signature_size,
        is_null,
        v);
      i.Signature_null = is_null;
      grew = grew || (cap != i.Signature_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::orencash::persist::TransactionInput, id_sqlite >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // TransactionID
    //
    {
      ::uint64_t& v =
        o.TransactionID;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.TransactionID_value,
        i.TransactionID_null);
    }

    // Index
    //
    {
      ::uint64_t& v =
        o.Index;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.Index_value,
        i.Index_null);
    }

    // Amount
    //
    {
      ::uint64_t& v =
        o.Amount;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.Amount_value,
        i.Amount_null);
    }

    // Address
    //
    {
      ::std::string& v =
        o.Address;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.Address_value,
        i.Address_size,
        i.Address_null);
    }

    // Signature
    //
    {
      ::std::string& v =
        o.Signature;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.Signature_value,
        i.Signature_size,
        i.Signature_null);
    }
  }

  // TransactionOutput
  //

  bool access::composite_value_traits< ::orencash::persist::TransactionOutput, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // TransactionID
    //
    t[0UL] = false;

    // Index
    //
    t[1UL] = false;

    // Amount
    //
    t[2UL] = false;

    // Address
    //
    if (t[3UL])
    {
      i.Address_value.capacity (i.Address_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::orencash::persist::TransactionOutput, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // TransactionID
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.TransactionID_value;
    b[n].is_null = &i.TransactionID_null;
    n++;

    // Index
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.Index_value;
    b[n].is_null = &i.Index_null;
    n++;

    // Amount
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.Amount_value;
    b[n].is_null = &i.Amount_null;
    n++;

    // Address
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.Address_value.data ();
    b[n].size = &i.Address_size;
    b[n].capacity = i.Address_value.capacity ();
    b[n].is_null = &i.Address_null;
    n++;
  }

  bool access::composite_value_traits< ::orencash::persist::TransactionOutput, id_sqlite >::
  init (image_type& i,
        const value_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // TransactionID
    //
    {
      ::uint64_t const& v =
        o.TransactionID;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.TransactionID_value,
        is_null,
        v);
      i.TransactionID_null = is_null;
    }

    // Index
    //
    {
      ::uint64_t const& v =
        o.Index;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.Index_value,
        is_null,
        v);
      i.Index_null = is_null;
    }

    // Amount
    //
    {
      ::uint64_t const& v =
        o.Amount;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.Amount_value,
        is_null,
        v);
      i.Amount_null = is_null;
    }

    // Address
    //
    {
      ::std::string const& v =
        o.Address;

      bool is_null (false);
      std::size_t cap (i.Address_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.Address_value,
        i.Address_size,
        is_null,
        v);
      i.Address_null = is_null;
      grew = grew || (cap != i.Address_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::orencash::persist::TransactionOutput, id_sqlite >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // TransactionID
    //
    {
      ::uint64_t& v =
        o.TransactionID;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.TransactionID_value,
        i.TransactionID_null);
    }

    // Index
    //
    {
      ::uint64_t& v =
        o.Index;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.Index_value,
        i.Index_null);
    }

    // Amount
    //
    {
      ::uint64_t& v =
        o.Amount;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.Amount_value,
        i.Amount_null);
    }

    // Address
    //
    {
      ::std::string& v =
        o.Address;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.Address_value,
        i.Address_size,
        i.Address_null);
    }
  }

  // Transaction
  //

  struct access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::extra_statement_cache_type
  {
    sqlite::container_statements_impl< Inputs_traits > Inputs;
    sqlite::container_statements_impl< Outputs_traits > Outputs;

    extra_statement_cache_type (
      sqlite::connection& c,
      image_type&,
      id_image_type&,
      sqlite::binding& id,
      sqlite::binding&)
    : Inputs (c, id),
      Outputs (c, id)
    {
    }
  };

  // Inputs
  //

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  select_statement[] =
  "SELECT "
  "\"Transaction_Inputs\".\"index\", "
  "\"Transaction_Inputs\".\"value_TransactionID\", "
  "\"Transaction_Inputs\".\"value_Index\", "
  "\"Transaction_Inputs\".\"value_Amount\", "
  "\"Transaction_Inputs\".\"value_Address\", "
  "\"Transaction_Inputs\".\"value_Signature\" "
  "FROM \"Transaction_Inputs\" "
  "WHERE \"Transaction_Inputs\".\"object_id\"=? ORDER BY \"Transaction_Inputs\".\"index\"";

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  insert_statement[] =
  "INSERT INTO \"Transaction_Inputs\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value_TransactionID\", "
  "\"value_Index\", "
  "\"value_Amount\", "
  "\"value_Address\", "
  "\"value_Signature\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  delete_statement[] =
  "DELETE FROM \"Transaction_Inputs\" "
  "WHERE \"object_id\"=?";

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    composite_value_traits< value_type, id_sqlite >::bind (
      b + n, d.value_value, sk);
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = false;

    // value
    //
    if (composite_value_traits< value_type, id_sqlite >::grow (
          i.value_value, t + 1UL))
      grew = true;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace sqlite;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_image (
        i.index_value,
        is_null,
        *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      if (composite_value_traits< value_type, id_sqlite >::init (
            i.value_value,
            v,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      composite_value_traits< value_type, id_sqlite >::init (
        v,
        i.value_value,
        db);
    }
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  delete_ (void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Inputs_traits::
  erase (statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  // Outputs
  //

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  select_statement[] =
  "SELECT "
  "\"Transaction_Outputs\".\"index\", "
  "\"Transaction_Outputs\".\"value_TransactionID\", "
  "\"Transaction_Outputs\".\"value_Index\", "
  "\"Transaction_Outputs\".\"value_Amount\", "
  "\"Transaction_Outputs\".\"value_Address\" "
  "FROM \"Transaction_Outputs\" "
  "WHERE \"Transaction_Outputs\".\"object_id\"=? ORDER BY \"Transaction_Outputs\".\"index\"";

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  insert_statement[] =
  "INSERT INTO \"Transaction_Outputs\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value_TransactionID\", "
  "\"value_Index\", "
  "\"value_Amount\", "
  "\"value_Address\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  delete_statement[] =
  "DELETE FROM \"Transaction_Outputs\" "
  "WHERE \"object_id\"=?";

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    composite_value_traits< value_type, id_sqlite >::bind (
      b + n, d.value_value, sk);
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = false;

    // value
    //
    if (composite_value_traits< value_type, id_sqlite >::grow (
          i.value_value, t + 1UL))
      grew = true;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace sqlite;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_image (
        i.index_value,
        is_null,
        *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      if (composite_value_traits< value_type, id_sqlite >::init (
            i.value_value,
            v,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      composite_value_traits< value_type, id_sqlite >::init (
        v,
        i.value_value,
        db);
    }
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  delete_ (void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::Outputs_traits::
  erase (statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::id_type
  access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        id,
        i.ID_value,
        i.ID_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // ID
    //
    t[0UL] = false;

    // Hash
    //
    if (t[1UL])
    {
      i.Hash_value.capacity (i.Hash_size);
      grew = true;
    }

    // Type
    //
    t[2UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // ID
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.ID_value;
      b[n].is_null = &i.ID_null;
      n++;
    }

    // Hash
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.Hash_value.data ();
    b[n].size = &i.Hash_size;
    b[n].capacity = i.Hash_value.capacity ();
    b[n].is_null = &i.Hash_null;
    n++;

    // Type
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.Type_value;
    b[n].is_null = &i.Type_null;
    n++;
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // ID
    //
    if (sk == statement_insert)
    {
      ::uint64_t const& v =
        o.ID;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.ID_value,
        is_null,
        v);
      i.ID_null = is_null;
    }

    // Hash
    //
    {
      ::std::string const& v =
        o.Hash;

      bool is_null (false);
      std::size_t cap (i.Hash_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.Hash_value,
        i.Hash_size,
        is_null,
        v);
      i.Hash_null = is_null;
      grew = grew || (cap != i.Hash_value.capacity ());
    }

    // Type
    //
    {
      ::orencash::persist::TransactionType const& v =
        o.Type;

      bool is_null (false);
      sqlite::value_traits<
          ::orencash::persist::TransactionType,
          sqlite::id_integer >::set_image (
        i.Type_value,
        is_null,
        v);
      i.Type_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // ID
    //
    {
      ::uint64_t& v =
        o.ID;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.ID_value,
        i.ID_null);
    }

    // Hash
    //
    {
      ::std::string& v =
        o.Hash;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.Hash_value,
        i.Hash_size,
        i.Hash_null);
    }

    // Type
    //
    {
      ::orencash::persist::TransactionType& v =
        o.Type;

      sqlite::value_traits<
          ::orencash::persist::TransactionType,
          sqlite::id_integer >::set_value (
        v,
        i.Type_value,
        i.Type_null);
    }
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Transaction\" "
  "(\"ID\", "
  "\"Hash\", "
  "\"Type\") "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Transaction\".\"ID\", "
  "\"Transaction\".\"Hash\", "
  "\"Transaction\".\"Type\" "
  "FROM \"Transaction\" "
  "WHERE \"Transaction\".\"ID\"=?";

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::update_statement[] =
  "UPDATE \"Transaction\" "
  "SET "
  "\"Hash\"=?, "
  "\"Type\"=? "
  "WHERE \"ID\"=?";

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Transaction\" "
  "WHERE \"ID\"=?";

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Transaction\".\"ID\", "
  "\"Transaction\".\"Hash\", "
  "\"Transaction\".\"Type\" "
  "FROM \"Transaction\"";

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Transaction\"";

  const char access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::table_name[] =
  "\"Transaction\"";

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    id_image_type& i (sts.id_image ());
    init (i, obj.ID);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // Inputs
    //
    {
      ::std::vector< ::orencash::persist::TransactionInput > const& v =
        obj.Inputs;

      Inputs_traits::persist (
        v,
        esc.Inputs);
    }

    // Outputs
    //
    {
      ::std::vector< ::orencash::persist::TransactionOutput > const& v =
        obj.Outputs;

      Outputs_traits::persist (
        v,
        esc.Outputs);
    }

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.ID);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // Inputs
    //
    {
      ::std::vector< ::orencash::persist::TransactionInput > const& v =
        obj.Inputs;

      Inputs_traits::update (
        v,
        esc.Inputs);
    }

    // Outputs
    //
    {
      ::std::vector< ::orencash::persist::TransactionOutput > const& v =
        obj.Outputs;

      Outputs_traits::update (
        v,
        esc.Outputs);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // Inputs
    //
    Inputs_traits::erase (
      esc.Inputs);

    // Outputs
    //
    Outputs_traits::erase (
      esc.Outputs);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::pointer_type
  access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.ID);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // Inputs
    //
    {
      ::std::vector< ::orencash::persist::TransactionInput >& v =
        obj.Inputs;

      Inputs_traits::load (
        v,
        esc.Inputs);
    }

    // Outputs
    //
    {
      ::std::vector< ::orencash::persist::TransactionOutput >& v =
        obj.Outputs;

      Outputs_traits::load (
        v,
        esc.Outputs);
    }
  }

  result< access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::object_type >
  access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::orencash::persist::Transaction, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // Block
  //

  struct access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::extra_statement_cache_type
  {
    sqlite::container_statements_impl< Transactions_traits > Transactions;

    extra_statement_cache_type (
      sqlite::connection& c,
      image_type&,
      id_image_type&,
      sqlite::binding& id,
      sqlite::binding&)
    : Transactions (c, id)
    {
    }
  };

  // Transactions
  //

  const char access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  select_statement[] =
  "SELECT "
  "\"Block_Transactions\".\"index\", "
  "\"Block_Transactions\".\"value\" "
  "FROM \"Block_Transactions\" "
  "WHERE \"Block_Transactions\".\"object_id\"=? ORDER BY \"Block_Transactions\".\"index\"";

  const char access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  insert_statement[] =
  "INSERT INTO \"Block_Transactions\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value\") "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  delete_statement[] =
  "DELETE FROM \"Block_Transactions\" "
  "WHERE \"object_id\"=?";

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = false;

    // value
    //
    t[1UL] = false;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace sqlite;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_image (
        i.index_value,
        is_null,
        *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      typedef object_traits< ::orencash::persist::Transaction > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.value_value,
          is_null,
          id);
        i.value_null = is_null;
      }
      else
        i.value_null = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      typedef object_traits< ::orencash::persist::Transaction > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  delete_ (void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::Transactions_traits::
  erase (statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::id_type
  access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        id,
        i.Index_value,
        i.Index_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // Index
    //
    t[0UL] = false;

    // PreviousHash
    //
    if (t[1UL])
    {
      i.PreviousHash_value.capacity (i.PreviousHash_size);
      grew = true;
    }

    // TimeStamp
    //
    t[2UL] = false;

    // Nonce
    //
    t[3UL] = false;

    // Hash
    //
    if (t[4UL])
    {
      i.Hash_value.capacity (i.Hash_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // Index
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.Index_value;
      b[n].is_null = &i.Index_null;
      n++;
    }

    // PreviousHash
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.PreviousHash_value.data ();
    b[n].size = &i.PreviousHash_size;
    b[n].capacity = i.PreviousHash_value.capacity ();
    b[n].is_null = &i.PreviousHash_null;
    n++;

    // TimeStamp
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.TimeStamp_value;
    b[n].is_null = &i.TimeStamp_null;
    n++;

    // Nonce
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.Nonce_value;
    b[n].is_null = &i.Nonce_null;
    n++;

    // Hash
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.Hash_value.data ();
    b[n].size = &i.Hash_size;
    b[n].capacity = i.Hash_value.capacity ();
    b[n].is_null = &i.Hash_null;
    n++;
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // Index
    //
    if (sk == statement_insert)
    {
      ::uint64_t const& v =
        o.Index;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.Index_value,
        is_null,
        v);
      i.Index_null = is_null;
    }

    // PreviousHash
    //
    {
      ::std::string const& v =
        o.PreviousHash;

      bool is_null (false);
      std::size_t cap (i.PreviousHash_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.PreviousHash_value,
        i.PreviousHash_size,
        is_null,
        v);
      i.PreviousHash_null = is_null;
      grew = grew || (cap != i.PreviousHash_value.capacity ());
    }

    // TimeStamp
    //
    {
      ::time_t const& v =
        o.TimeStamp;

      bool is_null (false);
      sqlite::value_traits<
          ::time_t,
          sqlite::id_integer >::set_image (
        i.TimeStamp_value,
        is_null,
        v);
      i.TimeStamp_null = is_null;
    }

    // Nonce
    //
    {
      ::uint64_t const& v =
        o.Nonce;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.Nonce_value,
        is_null,
        v);
      i.Nonce_null = is_null;
    }

    // Hash
    //
    {
      ::std::string const& v =
        o.Hash;

      bool is_null (false);
      std::size_t cap (i.Hash_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.Hash_value,
        i.Hash_size,
        is_null,
        v);
      i.Hash_null = is_null;
      grew = grew || (cap != i.Hash_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // Index
    //
    {
      ::uint64_t& v =
        o.Index;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.Index_value,
        i.Index_null);
    }

    // PreviousHash
    //
    {
      ::std::string& v =
        o.PreviousHash;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.PreviousHash_value,
        i.PreviousHash_size,
        i.PreviousHash_null);
    }

    // TimeStamp
    //
    {
      ::time_t& v =
        o.TimeStamp;

      sqlite::value_traits<
          ::time_t,
          sqlite::id_integer >::set_value (
        v,
        i.TimeStamp_value,
        i.TimeStamp_null);
    }

    // Nonce
    //
    {
      ::uint64_t& v =
        o.Nonce;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.Nonce_value,
        i.Nonce_null);
    }

    // Hash
    //
    {
      ::std::string& v =
        o.Hash;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.Hash_value,
        i.Hash_size,
        i.Hash_null);
    }
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Block\" "
  "(\"Index\", "
  "\"PreviousHash\", "
  "\"TimeStamp\", "
  "\"Nonce\", "
  "\"Hash\") "
  "VALUES "
  "(?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Block\".\"Index\", "
  "\"Block\".\"PreviousHash\", "
  "\"Block\".\"TimeStamp\", "
  "\"Block\".\"Nonce\", "
  "\"Block\".\"Hash\" "
  "FROM \"Block\" "
  "WHERE \"Block\".\"Index\"=?";

  const char access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::update_statement[] =
  "UPDATE \"Block\" "
  "SET "
  "\"PreviousHash\"=?, "
  "\"TimeStamp\"=?, "
  "\"Nonce\"=?, "
  "\"Hash\"=? "
  "WHERE \"Index\"=?";

  const char access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Block\" "
  "WHERE \"Index\"=?";

  const char access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Block\".\"Index\", "
  "\"Block\".\"PreviousHash\", "
  "\"Block\".\"TimeStamp\", "
  "\"Block\".\"Nonce\", "
  "\"Block\".\"Hash\" "
  "FROM \"Block\"";

  const char access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Block\"";

  const char access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::table_name[] =
  "\"Block\"";

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    id_image_type& i (sts.id_image ());
    init (i, obj.Index);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // Transactions
    //
    {
      ::std::vector< ::std::shared_ptr< ::orencash::persist::Transaction > > const& v =
        obj.Transactions;

      Transactions_traits::persist (
        v,
        esc.Transactions);
    }

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.Index);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // Transactions
    //
    {
      ::std::vector< ::std::shared_ptr< ::orencash::persist::Transaction > > const& v =
        obj.Transactions;

      Transactions_traits::update (
        v,
        esc.Transactions);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // Transactions
    //
    Transactions_traits::erase (
      esc.Transactions);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::pointer_type
  access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.Index);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // Transactions
    //
    {
      ::std::vector< ::std::shared_ptr< ::orencash::persist::Transaction > >& v =
        obj.Transactions;

      Transactions_traits::load (
        v,
        esc.Transactions);
    }
  }

  result< access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::object_type >
  access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::orencash::persist::Block, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // KeyPair
  //

  bool access::composite_value_traits< ::orencash::persist::KeyPair, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // PublicKey
    //
    if (t[0UL])
    {
      i.PublicKey_value.capacity (i.PublicKey_size);
      grew = true;
    }

    // PrivateKey
    //
    if (t[1UL])
    {
      i.PrivateKey_value.capacity (i.PrivateKey_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::orencash::persist::KeyPair, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // PublicKey
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.PublicKey_value.data ();
    b[n].size = &i.PublicKey_size;
    b[n].capacity = i.PublicKey_value.capacity ();
    b[n].is_null = &i.PublicKey_null;
    n++;

    // PrivateKey
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.PrivateKey_value.data ();
    b[n].size = &i.PrivateKey_size;
    b[n].capacity = i.PrivateKey_value.capacity ();
    b[n].is_null = &i.PrivateKey_null;
    n++;
  }

  bool access::composite_value_traits< ::orencash::persist::KeyPair, id_sqlite >::
  init (image_type& i,
        const value_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // PublicKey
    //
    {
      ::std::string const& v =
        o.PublicKey;

      bool is_null (false);
      std::size_t cap (i.PublicKey_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.PublicKey_value,
        i.PublicKey_size,
        is_null,
        v);
      i.PublicKey_null = is_null;
      grew = grew || (cap != i.PublicKey_value.capacity ());
    }

    // PrivateKey
    //
    {
      ::std::string const& v =
        o.PrivateKey;

      bool is_null (false);
      std::size_t cap (i.PrivateKey_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.PrivateKey_value,
        i.PrivateKey_size,
        is_null,
        v);
      i.PrivateKey_null = is_null;
      grew = grew || (cap != i.PrivateKey_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::orencash::persist::KeyPair, id_sqlite >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // PublicKey
    //
    {
      ::std::string& v =
        o.PublicKey;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.PublicKey_value,
        i.PublicKey_size,
        i.PublicKey_null);
    }

    // PrivateKey
    //
    {
      ::std::string& v =
        o.PrivateKey;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.PrivateKey_value,
        i.PrivateKey_size,
        i.PrivateKey_null);
    }
  }

  // Wallet
  //

  struct access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::extra_statement_cache_type
  {
    sqlite::container_statements_impl< Keypairs_traits > Keypairs;

    extra_statement_cache_type (
      sqlite::connection& c,
      image_type&,
      id_image_type&,
      sqlite::binding& id,
      sqlite::binding&)
    : Keypairs (c, id)
    {
    }
  };

  // Keypairs
  //

  const char access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  select_statement[] =
  "SELECT "
  "\"Wallet_Keypairs\".\"index\", "
  "\"Wallet_Keypairs\".\"value_PublicKey\", "
  "\"Wallet_Keypairs\".\"value_PrivateKey\" "
  "FROM \"Wallet_Keypairs\" "
  "WHERE \"Wallet_Keypairs\".\"object_id\"=? ORDER BY \"Wallet_Keypairs\".\"index\"";

  const char access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  insert_statement[] =
  "INSERT INTO \"Wallet_Keypairs\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value_PublicKey\", "
  "\"value_PrivateKey\") "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  delete_statement[] =
  "DELETE FROM \"Wallet_Keypairs\" "
  "WHERE \"object_id\"=?";

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    composite_value_traits< value_type, id_sqlite >::bind (
      b + n, d.value_value, sk);
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = false;

    // value
    //
    if (composite_value_traits< value_type, id_sqlite >::grow (
          i.value_value, t + 1UL))
      grew = true;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace sqlite;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_image (
        i.index_value,
        is_null,
        *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      if (composite_value_traits< value_type, id_sqlite >::init (
            i.value_value,
            v,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      sqlite::value_traits<
          index_type,
          sqlite::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      composite_value_traits< value_type, id_sqlite >::init (
        v,
        i.value_value,
        db);
    }
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  delete_ (void* d)
  {
    using namespace sqlite;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::Keypairs_traits::
  erase (statements_type& sts)
  {
    using namespace sqlite;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::id_type
  access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        id,
        i.ID_value,
        i.ID_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // ID
    //
    t[0UL] = false;

    // PasswordHash
    //
    if (t[1UL])
    {
      i.PasswordHash_value.capacity (i.PasswordHash_size);
      grew = true;
    }

    // Secret
    //
    if (t[2UL])
    {
      i.Secret_value.capacity (i.Secret_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // ID
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.ID_value;
      b[n].is_null = &i.ID_null;
      n++;
    }

    // PasswordHash
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.PasswordHash_value.data ();
    b[n].size = &i.PasswordHash_size;
    b[n].capacity = i.PasswordHash_value.capacity ();
    b[n].is_null = &i.PasswordHash_null;
    n++;

    // Secret
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.Secret_value.data ();
    b[n].size = &i.Secret_size;
    b[n].capacity = i.Secret_value.capacity ();
    b[n].is_null = &i.Secret_null;
    n++;
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // ID
    //
    if (sk == statement_insert)
    {
      ::uint64_t const& v =
        o.ID;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.ID_value,
        is_null,
        v);
      i.ID_null = is_null;
    }

    // PasswordHash
    //
    {
      ::std::string const& v =
        o.PasswordHash;

      bool is_null (false);
      std::size_t cap (i.PasswordHash_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.PasswordHash_value,
        i.PasswordHash_size,
        is_null,
        v);
      i.PasswordHash_null = is_null;
      grew = grew || (cap != i.PasswordHash_value.capacity ());
    }

    // Secret
    //
    {
      ::std::string const& v =
        o.Secret;

      bool is_null (false);
      std::size_t cap (i.Secret_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.Secret_value,
        i.Secret_size,
        is_null,
        v);
      i.Secret_null = is_null;
      grew = grew || (cap != i.Secret_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // ID
    //
    {
      ::uint64_t& v =
        o.ID;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.ID_value,
        i.ID_null);
    }

    // PasswordHash
    //
    {
      ::std::string& v =
        o.PasswordHash;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.PasswordHash_value,
        i.PasswordHash_size,
        i.PasswordHash_null);
    }

    // Secret
    //
    {
      ::std::string& v =
        o.Secret;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.Secret_value,
        i.Secret_size,
        i.Secret_null);
    }
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Wallet\" "
  "(\"ID\", "
  "\"PasswordHash\", "
  "\"Secret\") "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Wallet\".\"ID\", "
  "\"Wallet\".\"PasswordHash\", "
  "\"Wallet\".\"Secret\" "
  "FROM \"Wallet\" "
  "WHERE \"Wallet\".\"ID\"=?";

  const char access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::update_statement[] =
  "UPDATE \"Wallet\" "
  "SET "
  "\"PasswordHash\"=?, "
  "\"Secret\"=? "
  "WHERE \"ID\"=?";

  const char access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Wallet\" "
  "WHERE \"ID\"=?";

  const char access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Wallet\".\"ID\", "
  "\"Wallet\".\"PasswordHash\", "
  "\"Wallet\".\"Secret\" "
  "FROM \"Wallet\"";

  const char access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Wallet\"";

  const char access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::table_name[] =
  "\"Wallet\"";

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    id_image_type& i (sts.id_image ());
    init (i, obj.ID);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // Keypairs
    //
    {
      ::std::vector< ::orencash::persist::KeyPair > const& v =
        obj.Keypairs;

      Keypairs_traits::persist (
        v,
        esc.Keypairs);
    }

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.ID);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // Keypairs
    //
    {
      ::std::vector< ::orencash::persist::KeyPair > const& v =
        obj.Keypairs;

      Keypairs_traits::update (
        v,
        esc.Keypairs);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // Keypairs
    //
    Keypairs_traits::erase (
      esc.Keypairs);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::pointer_type
  access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.ID);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // Keypairs
    //
    {
      ::std::vector< ::orencash::persist::KeyPair >& v =
        obj.Keypairs;

      Keypairs_traits::load (
        v,
        esc.Keypairs);
    }
  }

  result< access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::object_type >
  access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::orencash::persist::Wallet, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
